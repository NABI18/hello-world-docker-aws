AWSTemplateFormatVersion: "2010-09-09"

Description:

  AWS CloudFormation template to create resources required to run tasks on an ECS cluster,
  using the 2017.03 amazon-ecs-optimized AMI

Parameters:

  EcsCluster:
    Description: ECS Cluster Name
    Type: String
    Default: hello-world

  EcsInstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: t2.micro
    ConstraintDescription: Must be a valid EC2 instance type.
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge

  KeyName:
    Description: Required - Name of an existing EC2 KeyPair to enable SSH access to launched ECS instances
    Type: AWS::EC2::KeyPair::KeyName

  AsgMaxSize:
    Description: Maximum size and initial Desired Capacity of ECS Auto Scaling Group
    Type: Number
    Default: 1

  SecurityGroup:
    Description: Optional - Existing security group to associate the Load Balancer.
    Type: String
    Default: ""

  SourceCidr:
    Description: Optional - CIDR/IP range for Load Balancer - defaults to 0.0.0.0/0"
    Type: String
    Default: 0.0.0.0/0

Mappings:

  # These are the latest ECS Optimized AMIs as of March 2017
  #
  # name: amzn-ami-2017.03.d-amazon-ecs-optimized
  # ecs agent: 1.14.3
  # docker: 17.03.1-ce
  # ecs-init: 1.14.3-1
  #
  # ref: http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
  # AMIs identifiers are region specific

  AWSRegionToAMI:
    us-east-1:
      AMI: ami-04351e12
    us-west-1:
      AMI: ami-7d664a1d
    us-west-2:
      AMI: ami-57d9cd2e
    eu-west-1:
      AMI: ami-809f84e6
    eu-central-1:
      AMI: ami-a3a006cc
    ap-northeast-1:
      AMI: ami-e4657283
    ap-southeast-1:
      AMI: ami-19f7787a
    ap-southeast-2:
      AMI: ami-42e9f921

  VpcCidrs:
    vpc:
      cidr: 10.0.0.0/16
    pubsubnet1:
      cidr: 10.0.0.0/24
    pubsubnet2:
      cidr: 10.0.1.0/24

Conditions:

  CreateSecurityGroup:
    !Equals [ !Ref SecurityGroup, "" ]

Resources:

# VPC

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ VpcCidrs, vpc, cidr ]
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PubSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ VpcCidrs, pubsubnet1, cidr ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]

  PubSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ VpcCidrs, pubsubnet2, cidr ]
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]

  InternetGateway:
    DependsOn: Vpc
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteViaIgw:
    DependsOn: AttachGateway
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRouteViaIgw:
    DependsOn: RouteViaIgw
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PubSubnet1RouteTableAssociation:
    DependsOn: PublicRouteViaIgw
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw

  PubSubnet2RouteTableAssociation:
    DependsOn: PublicRouteViaIgw
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw

## Security Groups

  LoadBalancerSecurityGroup:
    Condition: CreateSecurityGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Port 80 for HTTP ECS Access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref SourceCidr
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${EcsCluster}-LoadBalancers

  EcsSecurityGroup:
    Condition: CreateSecurityGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Allowed Ports
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        # Only allow inbound access to ECS from the ELB
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EcsCluster}-ECS-Hosts

## Load Balancer

  LoadBalancer:
    DependsOn: AttachGateway
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}
      Subnets: [ !Ref PubSubnetAz1, !Ref PubSubnetAz2 ]
      SecurityGroups:
        - !If [ CreateSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref SecurityGroup ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: default
      VpcId: !Ref Vpc
      Port: 80
      Protocol: HTTP

## ECS Cluster

  EcsClusterResource:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsCluster

  ServiceRolePolicy:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  EcsInstancePolicy:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EcsInstancePolicy

  EcsInstanceLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref EcsInstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EcsInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroups:
        - !If [ CreateSecurityGroup, !Ref EcsSecurityGroup, !Ref SecurityGroup ]
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config


  EcsInstanceAsg:
    DependsOn: AttachGateway
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref PubSubnetAz1, !Ref PubSubnetAz2 ]
      LaunchConfigurationName: !Ref EcsInstanceLc
      MinSize: 1
      MaxSize: !Ref AsgMaxSize
      DesiredCapacity: !Ref AsgMaxSize
      Tags:
        - Key: Name
          Value: !Sub ECS Instance - ${AWS::StackName}
          PropagateAtLaunch: true

Outputs:

  VpcId:
    Description: The VPC ID of the VPC
    Value: !Ref Vpc
    Export:
      Name: !Sub ${AWS::StackName}-VPCID

  KeyName:
    Description: The name of SSH key
    Value: !Ref KeyName
    Export:
      Name: !Sub ${AWS::StackName}-KeyName

  SubnetA:
    Description: The ID of subnet A
    Value: !Ref PubSubnetAz1
    Export:
      Name: !Sub ${AWS::StackName}-SubnetA

  SubnetB:
    Description: The ID of subnet B
    Value: !Ref PubSubnetAz2
    Export:
      Name: !Sub ${AWS::StackName}-SubnetB

  AvailabilityZone1:
    Description: Availability Zone 1
    Value: !GetAtt [ PubSubnetAz1, AvailabilityZone ]
    Export:
      Name: !Sub ${AWS::StackName}-AZ1

  AvailabilityZone2:
    Description: Availability Zone 2
    Value: !GetAtt [ PubSubnetAz2, AvailabilityZone ]
    Export:
      Name: !Sub ${AWS::StackName}-AZ2

  LoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer

  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt LoadBalancer.DNSName

  Listener:
    Description: A reference to a port 80 listener
    Value: !Ref LoadBalancerListener

  DefaultTarget:
    Description: The Target Group for the ALB
    Value: !Ref DefaultTargetGroup

  ServiceRole:
    Description: The IAM Role for Services in the Cluster
    Value: !Ref ServiceRolePolicy